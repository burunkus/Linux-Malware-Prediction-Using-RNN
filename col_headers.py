class Header():
      def __init__(self, data=None, malware_col=None):
            malware_col = 'malware' if malware_col is None else malware_col
            self.training_headers = [
                'elf.nsegments',
                'elf.stripped_sections',
                'elf.stripped',
                'funcover.idapro.max_basic_blocks',
                'bytes.entropy',
                'funcover.idapro.average_bytes_func',
                'funcover.idapro.avg_loc',
                'libide.lstrings.libc.matches',
                'funcover.idapro.avg_basic_blocks',
                'funcover.idapro.syscall_instr',
                'elf.e_shstrndx',
                'funcover.idapro.max_cyclomatic_complexity',
                'funcover.findcrypt.total',
                'bytes.rarest_bytes5',
                'funcover.idapro.branch_instr',
                'funcover.idapro.indirect_call_instr',
                'funcover.idapro.nfuncs',
                'bytes.printable',
                'bytes.rarest_bytes6',
                'funcover.idapro.badstack',
                'bytes.rarest_bytes1',
                'bytes.rarest_bytes2',
                'funcover.idapro.call_instr',
                'funcover.idapro.loc',
                'funcover.idapro.avg_cyclomatic_complexity',
                'elf.nsections',
                'elf.e_shnum',
                'bytes.min_entropy',
                'bytes.common_bytes3',
                'bytes.common_bytes5',
                'elf.e_shoff',
                'bytes.longest_sequence.length',
                'bytes.common_bytes2',
                'funcover.idapro.indirect_branch_instr',
                'bytes.null_bytes',
                'bytes.common_bytes4',
                'funcover.idapro.overlapped_instr',
                malware_col]
            self.classification_col = self.training_headers.index(malware_col)
